sort1 uses: bubble sort

How do you know?: needs the most time in random sorted numbers, but is the fastest in sorted numbers. O(n²), Omega(n²)

sort2 uses: merge sort

How do you know?: most quick walk through, when having random sorted numbers. O(n log n), Omega(n log n)

sort3 uses: selection sort

How do you know?: fastest in reverse sorted numbers. O(n²), Omega(n)

/*
sort1 rev5000:  138s        random5000: 073s        sorted5000: 025s
      rev10000: 233s        random10000: 294s       sorted10000: 061s
      rev50000: 5,638s      random50000: 7,401s     sorted50000: 144s

sort2 rev5000:  059s        random5000: 021s        sorted5000: 029s
      rev10000: 113s        random10000: 100s       sorted10000: 058s
      rev50000: 442s        random50000: 140s       sorted50000: 413s

sort3 rev5000:  046s        random5000: 054s        sorted5000: 047s
      rev10000: 191s        random10000: 158s       sorted10000: 165s
      rev50000: 2,984s      random50000: 3,171s     sorted50000: 3,117s
*/
